var u=Object.defineProperty;var m=(s,e,t)=>e in s?u(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var a=(s,e,t)=>m(s,typeof e!="symbol"?e+"":e,t);class d{constructor(){a(this,"form");a(this,"statusMessage");a(this,"temperatureSlider");a(this,"temperatureValue");this.form=document.getElementById("options-form"),this.statusMessage=document.getElementById("status-message"),this.temperatureSlider=document.getElementById("temperature"),this.temperatureValue=document.getElementById("temperature-value"),this.init()}init(){var e;this.loadSettings(),this.form.addEventListener("submit",t=>this.handleSubmit(t)),(e=document.getElementById("test-btn"))==null||e.addEventListener("click",()=>this.testConnection()),this.temperatureSlider.addEventListener("input",()=>{this.temperatureValue.textContent=this.temperatureSlider.value})}async loadSettings(){try{const e=await chrome.storage.sync.get(["provider","apiKey","model","temperature"]);e.provider&&(document.getElementById("provider").value=e.provider),e.apiKey&&(document.getElementById("api-key").value=e.apiKey),e.model&&(document.getElementById("model").value=e.model),e.temperature!==void 0&&(this.temperatureSlider.value=e.temperature.toString(),this.temperatureValue.textContent=e.temperature.toString())}catch(e){console.error("Failed to load settings:",e)}}async handleSubmit(e){e.preventDefault();const t=new FormData(this.form),o={provider:t.get("provider"),apiKey:t.get("apiKey"),model:t.get("model"),temperature:parseFloat(t.get("temperature"))};try{await chrome.storage.sync.set(o),this.showStatus("Settings saved successfully!","success")}catch{this.showStatus("Failed to save settings. Please try again.","error")}}async testConnection(){const e=new FormData(this.form),t=e.get("apiKey"),o=e.get("provider"),i=e.get("model"),n=parseFloat(e.get("temperature"));if(!t){this.showStatus("Please enter an API key first.","error");return}this.showStatus("Testing connection...","info");try{const r=await chrome.runtime.sendMessage({type:"RUN_SUMMARY",mode:"selection",text:"This is a test message to verify the API connection is working properly.",provider:o,model:i,temperature:n});r.ok?this.showStatus("Connection successful! Your API key is working.","success"):this.showStatus(`Connection failed: ${r.error}`,"error")}catch(r){this.showStatus(`Connection failed: ${r instanceof Error?r.message:"Unknown error"}`,"error")}}showStatus(e,t){this.statusMessage.textContent=e,this.statusMessage.className=`status-message ${t}`,this.statusMessage.classList.remove("hidden"),t==="success"&&setTimeout(()=>{this.statusMessage.classList.add("hidden")},3e3)}}document.addEventListener("DOMContentLoaded",()=>{new d});
